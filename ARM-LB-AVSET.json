{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "apiProfile": "2018-03-01-hybrid",
    "parameters": {
        "adminUsername": {
            "defaultValue": "vmadmin",
            "type": "String",
            "metadata": {
                "description": "The name of the Administrator of the new VMs"
            }
        },
        "adminPassword": {
            "defaultValue": "Mainosdjdda!",
            "type": "SecureString",
            "metadata": {
                "description": "The password for the Administrator account of the new VMs. Default value is subscription id"
            }
        },
        "numberOfInstances": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                2,
                3,
                4,
                5
            ],
            "type": "Int",
            "metadata": {
                "description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
            }
        },
        "vmNamePrefix": {
            "defaultValue": "AppServer",
            "type": "String",
            "metadata": {
                "description": "VM name prefix"
            }
        },
        "osImagePublisher": {
            "defaultValue": "MicrosoftWindowsServer",
            "type": "String",
            "metadata": {
                "description": "Maps to the publisher in the Azure Stack Platform Image Repository manifest file."
            }
        },
        "osImageOffer": {
            "defaultValue": "WindowsServer",
            "type": "String",
            "metadata": {
                "description": "Maps to the Offer in the Azure Stack Platform Image Repository manifest file."
            }
        },
        "osImageSKU": {
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2012-R2-Datacenter",
                "2019-Datacenter"
            ],
            "type": "String",
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
            }
        }
    },
    "variables": {
        "availabilitySetName": "AVSet-WM",
        "storageAccountType": "Standard_LRS",
        "VMSize": "Standard_F4s_v2",
        "dnsPrefix": "[tolower(concat('vmdns', resourceGroup().name))]",
        "windowsImageVersion": "latest",
        "addressPrefix": "10.0.0.0/16",
        "virtualNetworkName": "WM-VNet",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "NICPrefix": "vnic-",
        "subnetPrefix": "10.0.0.0/24",
        "subnetName": "PublicSubnet-WM",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "storageName": "storage01",
        "publicLBName": "WM-LB",
        "publiclbID": "[resourceId('Microsoft.Network/loadBalancers',variables('publicLBName'))]",
        "lbFE": "[concat(variables('publicLBName'),'-FE')]",
        "publiclbFEConfigID": "[concat(variables('publiclbID'),'/frontendIPConfigurations/',variables('lbFE'))]",
        "publicIPAddressName": "WM-PIP",
        "rdpPort": 3389,
        "nsgName": "[concat(parameters('vmNamePrefix'),'nsg')]",
        "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
        "vmContainerName": "vhds"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('publiclbName')]"
            ],
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "Storage"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": "2",
                "platformUpdateDomainCount": "5"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('vnetID')]"
            ],
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsPrefix')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('nsgID')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[variables('nsgID')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('publiclbName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('vnetID')]",
                "[variables('publicIPAddressName')]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('lbFE')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackend"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('publicLBName'), '/RDP-AppServer', copyIndex())]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('publiclbName'))]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('publiclbFEConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(5000)]",
                "backendPort": 3389,
                "enableFloatingIP": false
            },
            "copy": {
                "name": "lbNatLoop",
                "count": "[parameters('numberOfInstances')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('NICPrefix'), parameters('vmNamePrefix'), copyIndex())]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('publicLBName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('publicLBName'), '/inboundNatRules/', 'RDP-AppServer', copyIndex())]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('publiclbID'), '/backendAddressPools/LoadBalancerBackend')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('publiclbID'), '/inboundNatRules/RDP-AppServer', copyIndex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('numberOfInstances')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex())]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NICPrefix'), parameters('vmNamePrefix'), copyIndex()))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('vmNamePrefix'), copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[parameters('osImagePublisher')]",
                        "offer": "[parameters('osImageOffer')]",
                        "sku": "[parameters('osImageSKU')]",
                        "version": "[variables('windowsImageVersion')]"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')),providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmContainerName'),'/', parameters('vmNamePrefix'), copyIndex(),'-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                    },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NICPrefix'), parameters('vmNamePrefix'), copyIndex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')),providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob)]"
                    }
                }
            },
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfInstances')]"
            }
        }
    ],
    "outputs": {}
}